set -g default-terminal "${TERM}"
# Allow undercurls for terminals that support them.
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Allow coloured undercurls for terminals that support them.
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -ga update-environment 'KITTY_LISTEN_ON'

setw -g mode-keys vi

# Send prefix
set -g prefix C-Space

# get into copy mode fast
bind C-b copy-mode
bind b copy-mode
# Setup 'v' to begin selection as in Vim
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace xclip -in -selection clipboard"
bind -T copy-mode-vi Escape if -F '#{selection_present}' 'send-keys -X clear-selection' 'send-keys -X cancel'
bind p paste-buffer

# use vim-like keys windows
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
bind -T copy-mode-vi 'M-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind -T copy-mode-vi 'M-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi 'M-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind -T copy-mode-vi 'M-l' if -F '#{pane_at_right}' '' 'select-pane -R'

bind -n 'M-H' if-shell "$is_vim" 'send-keys M-H' 'resize-pane -L 1'
bind -n 'M-J' if-shell "$is_vim" 'send-keys M-J' 'resize-pane -D 1'
bind -n 'M-K' if-shell "$is_vim" 'send-keys M-K' 'resize-pane -U 1'
bind -n 'M-L' if-shell "$is_vim" 'send-keys M-L' 'resize-pane -R 1'

bind -T copy-mode-vi M-S-h resize-pane -L 1
bind -T copy-mode-vi M-S-j resize-pane -D 1
bind -T copy-mode-vi M-S-k resize-pane -U 1
bind -T copy-mode-vi M-S-l resize-pane -R 1

bind ^ last-window

# switch window
bind -r [ previous-window
bind -r ] next-window
# switch session
bind -r \{ switch-client -p
bind -r \} switch-client -n

bind w run-shell -b "${HOME}/.tmux/plugins/tmux-fzf/scripts/window.sh switch"

# use pwd for new windows
bind n new-window -c "#{pane_current_path}"
bind N command-prompt -p "command:"  "new-window -c '#{pane_current_path}' '%%'"
bind s split-window -v -c "#{pane_current_path}"
bind S command-prompt -p "command:"  "split-window -v -c '#{pane_current_path}' '%%'"
bind v split-window -h -c "#{pane_current_path}"
bind V command-prompt -p "command:"  "split-window -h -c '#{pane_current_path}' '%%'"

set -g status-position top
set -g status-left-length 80
set -g status-left "#{?client_prefix,#[fg=green bg=black],#[fg=yellow]} ‚ùê #S "
set -g status-right ''
set -g status-style "bg=black"
set -g mode-style "bg=white,fg=black"
set -g message-style "bg=black,fg=white"

setw -g window-status-separator "#[fg=brightblack]|#[default]"
setw -g window-status-current-style "bg=black,fg=white"
setw -g window-status-current-format " #I:#[bold,italics]#W#F "
setw -g window-status-style "fg=white dim"
setw -g window-status-format "#[none] #I:#W#F "

# only show status with multiple windows
# set -g status off
# set-hook -g window-linked "if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'"
# set-hook -g window-unlinked "if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'"

set -g mouse off

# List of plugins
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'sainnhe/tmux-fzf'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm
run '~/.local/share/tmux/plugins/tpm/tpm'
