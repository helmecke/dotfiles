# vim: fdm=marker
# Read `man 5 sway` for a complete reference.
# xwayland disable

# Variables {{{1
# Logo key. Use Mod1 for Alt. {{{2
set $mod Mod4
# Home row direction keys, like vim {{{2
set $left h
set $down j
set $up k
set $right l

# Your preferred applications {{{2
set $term kitty
set $launcher $term --class=launcher
set $menu wofi -f

set $browser qutebrowser
# Solarized colors {{{2
set $S_base03        #002b36
set $S_base02        #073642
set $S_base01        #586e75
set $S_base00        #657b83
set $S_base0         #839496
set $S_base1         #93a1a1
set $S_base2         #eee8d5
set $S_base3         #fdf6e3

set $S_yellow        #b58900
set $S_orange        #cb4b16
set $S_red           #dc322f
set $S_magenta       #d33682
set $S_violet        #6c71c4
set $S_blue          #268bd2
set $S_cyan          #2aa198
set $S_green         #859900

# Workspaces {{{2
set $ws1 1
set $ws2 2
set $ws3 3
set $ws4 4
set $ws5 5:
set $ws6 6:
set $ws7 7:
set $ws8 8:
set $ws9 9:
set $ws10 10:

# Font {{{1
font MesloLGM Nerd Font 11

# Output configuration {{{1
output * bg $S_base01 solid_color

set $laptop "eDP-1"
bindswitch --reload --locked lid:on output $laptop disable
bindswitch --reload --locked lid:off output $laptop enable

set $lg "Goldstar Company Ltd LG Ultra HD 0x00007F5E"
output $lg {
    scale 1.5
}

set $bq "BenQ Corporation BenQ GL2450H K1E03952019"

output $bq {
    scale 1
}
workspace $ws5 output DP-2
workspace $ws6 output eDP-1
workspace $ws7 output DP-2
workspace $ws8 output DP-2
workspace $ws9 output eDP-1

# Input configuration {{{1
input "type:touchpad" {
    dwt enabled
    tap enabled
    drag enabled
    middle_emulation enabled
    pointer_accel 0.5
}

input "*" {
    repeat_delay 400
    repeat_rate 30
    xkb_layout eu
    xkb_options caps:escape
}

input "1133:45900:Keyboard_K370/K375_Keyboard" {
    repeat_delay 250
    repeat_rate 40
    xkb_layout de
    xkb_variant nodeadkeys
    xkb_numlock enabled
}
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

seat * hide_cursor 3000
mouse_warping output

# Key bindings {{{1
# Basics {{{2

    # start a terminal
    bindsym $mod+Return exec $term

    # kill focused window
    bindsym $mod+q kill

    # start your launcher
    bindsym $mod+space exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # reload the configuration file
    # bindsym $mod+Shift+r reload

# Moving around {{{2

    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right

    # _move_ the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right

# Workspaces {{{2

    # switch to workspace
    bindsym $mod+1 workspace $ws1
    bindsym $mod+2 workspace $ws2
    bindsym $mod+3 workspace $ws3
    bindsym $mod+4 workspace $ws4
    bindsym $mod+5 workspace $ws5
    bindsym $mod+6 workspace $ws6
    bindsym $mod+7 workspace $ws7
    bindsym $mod+8 workspace $ws8
    bindsym $mod+9 workspace $ws9

    # move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace $ws1
    bindsym $mod+Shift+2 move container to workspace $ws2
    bindsym $mod+Shift+3 move container to workspace $ws3
    bindsym $mod+Shift+4 move container to workspace $ws4
    bindsym $mod+Shift+5 move container to workspace $ws5
    bindsym $mod+Shift+6 move container to workspace $ws6
    bindsym $mod+Shift+7 move container to workspace $ws7
    bindsym $mod+Shift+8 move container to workspace $ws8
    bindsym $mod+Shift+9 move container to workspace $ws9

    bindsym $mod+Shift+w move container to workspace $ws5
    bindsym $mod+Shift+s move container to workspace $ws6
    bindsym $mod+Shift+e move container to workspace $ws7
    bindsym $mod+Shift+r move container to workspace $ws8
    bindsym $mod+Shift+f move container to workspace $ws9
    bindsym $mod+Shift+d move container to workspace $ws10

    # move focused workspace to output
    bindsym $mod+Control+$left move workspace to output left
    bindsym $mod+Control+$down move workspace to output down
    bindsym $mod+Control+$up move workspace to output  up
    bindsym $mod+Control+$right move workspace to output right

# Layout stuff {{{2

    default_border pixel 3

    # Switch and move to previosly active workspace
    workspace_auto_back_and_forth yes

    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+o splith
    bindsym $mod+i splitv

    # Switch the current container between different layout styles
    # bindsym $mod+s layout stacking
    # bindsym $mod+w layout tabbed
    # bindsym $mod+e layout toggle split
    bindsym $mod+tab layout toggle
    bindsym $mod+Shift+tab layout toggle split tabbed stacking

    # Make the current focus fullscreen
    bindsym $mod+Control+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Control+space floating toggle
    bindsym $mod+Alt+space floating toggle; resize set 1800 900

    # Swap focus between the tiling area and the floating area
    # bindsym $mod+space focus mode_toggle
    bindsym $mod+Shift+space focus mode_toggle

    # move focus to the parent container
    bindsym $mod+a focus parent

# Scratchpad {{{2

    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through
    # them.
    bindsym $mod+minus scratchpad show

# Custom {{{2

    bindsym $mod+w workspace $ws5; \
        exec [ $(pgrep -c $browser) = 0 ] && \
        $browser
    bindsym $mod+r workspace $ws8; \
        exec ![ $(pgrep -c 'term_run') = 0 ] && \
        $term --class term_run --title term_run -e 'zsh'
    bindsym $mod+e workspace $ws7; \
        exec [ $(pgrep -cf '^nvr$') = 0 ] && \
        $term --class nvr --title nvr zsh -c 'rm -rf /tmp/nvim*; nvr'
    bindsym $mod+f workspace $ws9; \
        exec [ $(pgrep -cf 'vifm$') = 0 ] && \
        $term --class vifm --title vifm -e 'vifm'
    bindsym $mod+d workspace $ws10; \
        exec [ $(pgrep -c electron) = 0 ] && \
        keeweb&
    bindsym $mod+s workspace $ws6; \
        exec [ $(pgrep -c rambox) = 0 ] && \
        rambox

    bindsym XF86AudioRaiseVolume exec pactl set-sink-volume 0 +5%
    bindsym XF86AudioLowerVolume exec pactl set-sink-volume 0 -5%
    bindsym XF86AudioMute exec pactl set-sink-mute 0 toggle
    bindsym XF86MonBrightnessDown exec brightnessctl set 5%-
    bindsym XF86MonBrightnessUp exec brightnessctl set +5%

    # Spotify related key bindings
    bindsym XF86AudioPlay exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause"
    bindsym XF86AudioStop exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop"
    bindsym XF86AudioPrev exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"
    bindsym XF86AudioNext exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next"

    # bindsym XF86AudioPlay exec mpc toggle -q
    # bindsym XF86AudioNext exec mpc next -q
    # bindsym XF86AudioPrev mpc prev -q

    bindsym $mod+c exec wl-paste -p | wl-copy -n

    bindsym $mod+grave exec $term --class term_temp --title term_temp -e 'zsh'
    # bindsym $mod+grave exec "if [[ $(pgrep -cf 'term_temp') = 0 ]]; then $term --class term_temp --title term_temp -e 'zsh'; else pkill -f 'term_temp'; fi"


# Window rules {{{1
# use: swaymsg -t get_tree
    for_window [title="^wl-clipboard$"] floating enable
    for_window [instance="freecad"] floating enable
    for_window [instance="matplotlib"] floating enable
    for_window [class="zoom"] floating enable
    for_window [app_id="zoom"] floating enable
    for_window [app_id="wdisplays"] floating enable
    for_window [app_id="galculator"] floating enable
    for_window [app_id="pavucontrol"] floating enable
    for_window [app_id="nm-connection-editor"] floating enable
    for_window [app_id="^launcher$"] floating enable
    for_window [app_id="org.qutebrowser.input"] floating enable; resize grow width 450px; resize grow height 450px
    for_window [app_id="tipp10"] floating enable
    for_window [app_id="org.pwmt.zathura"] floating enable; resize grow width 450px; resize grow height 450px
    for_window [app_id="term_temp"] floating enable; resize set 80 ppt 80 ppt; sticky enable

    assign [app_id="nvr"] $ws7
    assign [app_id="term_run"] $ws8
    assign [title="^Preview:.*qutebrowser$"] $ws7
    assign [app_id="vifm"] $ws9
    assign [app_id="org.qutebrowser.qutebrowser"] $ws5

    assign [instance="brave-browser"] $ws5
    assign [instance="rambox"] $ws6
    assign [instance="keeweb"] $ws10

# Modes {{{1
# Resizing containers {{{2
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px
    bindsym c mode "default"; resize set 80 ppt 80 ppt; move position center

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Control+r mode "resize"

# Layout {{{2
set $mode_layout "Layout: (s) stacking, (w) tabbed, (e) split, (f) fullscreen, (space) floating"
mode $mode_layout {
    bindsym s mode "default"; layout stacking
    bindsym w mode "default"; layout tabbed
    bindsym e mode "default"; layout toggle split
    bindsym h mode "default"; layout splith
    bindsym v mode "default"; layout splitv
    bindsym f mode "default"; fullscreen
    bindsym Space mode "default"; floating toggle

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+t mode $mode_layout

# Screenshot {{{2
set $mode_screenshot "Screenshot: (a) all, (w) workspace, (r) region, (c) region to clipboard, (s) swappy"
mode $mode_screenshot {
    bindsym a mode "default"; exec grim $(xdg-user-dir PICTURES)/Screenshots/$(date +'%Y-%m-%d-%H%M%S.png')
    bindsym w mode "default"; exec grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') $(xdg-user-dir PICTURES)/Screenshots/$(date +'%Y-%m-%d-%H%M%S.png')
    bindsym r mode "default"; exec slurp | grim -g - $(xdg-user-dir PICTURES)/Screenshots/$(date +'%Y-%m-%d-%H%M%S.png')
    bindsym c mode "default"; exec slurp | grim -g - - | wl-copy
    bindsym s mode "default"; exec slurp | grim -g - - | swappy -f -

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym Print mode $mode_screenshot

# Power {{{2
set $mode_system "System: (l) lock, (e) exit, (s) suspend, (r) reboot, (p) shutdown, (o) reload"
mode $mode_system {
    bindsym l mode "default"; exec swaylock
    bindsym e mode "default"; exit
    bindsym s mode "default"; exec systemctl suspend
    bindsym r mode "default"; exec systemctl reboot
    bindsym p mode "default"; exec systemctl poweroff
    bindsym o mode "default"; reload

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Shift+q mode $mode_system

# Notification {{{2
set $mode_notification "Notification: (i) invoke, (d) dismiss, (a) dismiss all"
mode $mode_notification {
	bindsym i mode "default"; exec makoctl invoke; exec makoctl dismiss
	bindsym d mode "default"; exec makoctl dismiss
	bindsym a mode "default"; exec makoctl dismiss -a

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+n mode $mode_notification

# Gopass {{{2
set $mode_gopass "Gopass: (u) username, (p) password, (o) otp"
mode $mode_gopass {
	bindsym u mode "default"; exec gopass ls --flat | wofi --dmenu | xargs -I{} -r swaymsg -t command exec -- gopass show --clip {} username
	bindsym p mode "default"; exec gopass ls --flat | wofi --dmenu | xargs -r swaymsg -t command exec -- gopass show --clip
	bindsym o mode "default"; exec gopass ls --flat | wofi --dmenu | xargs -r swaymsg -t command exec -- gopass totp --clip
    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+z mode $mode_gopass

# Window colors {{{1
#                       border      background  text        indicator   child_border
client.focused          $S_base01   $S_base01   $S_base3    $S_green    $S_base01
client.unfocused        $S_base03   $S_base03   $S_base0    $S_base03   $S_base02
client.focused_inactive $S_base01   $S_base01   $S_base3    $S_base03   $S_base02
client.urgent           $S_red      $S_base03   $S_base03   $S_base03   $S_red

# Status Bar {{{1
# Read `man 5 sway-bar` for more information about this section.
bar {
    swaybar_command waybar
}

# Startup {{{1

# Notification daemon
exec mako

exec --no-startup-id autotiling

# Idle configuration
exec swayidle -w \
   timeout 300 'swaylock' \
   timeout 600 'swaymsg "output * dpms off"' \
      resume 'swaymsg "output * dpms on"' \
   before-sleep 'swaylock'

# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

